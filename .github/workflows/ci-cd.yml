name: CI/CD 

on:
  pull_request:
    branches:
      - '**'

  push:
    branches:
      - main
    tags:
      - 'v*' # Nur f√ºr Versionstags (z. B. v1.0.0)

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USER }}/${{ secrets.SERVICE }}
  NEXT_PUBLIC_BACKEND_SERVER_URL: ${{ secrets.NEXT_PUBLIC_BACKEND_SERVER_URL }}
  NEXT_PUBLIC_DEFAULT_ROUTE: ${{ secrets.NEXT_PUBLIC_DEFAULT_ROUTE }}
  NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}

  NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: ${{ secrets.KC_SERVICE_CLIENT_ID }}
  NEXT_PUBLIC_KEYCLOAK_CLIENT_SECRET: ${{ secrets.KC_SERVICE_SECRET }}
  NEXT_PUBLIC_KEYCLOAK_ISSUER: http://${{ secrets.KC_SERVICE_HOST }}:${{ secrets.KC_SERVICE_PORT }}/auth/realms/${{ secrets.KC_SERVICE_REALM }}

  NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}


jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      CURRENT_DATE: ${{ steps.set_date.outputs.CURRENT_DATE }}
    strategy:
      matrix:
        node-version: [23.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Compile TypeScript
        run: npx tsc


      - name: Set CURRENT_DATE
        id: set_date
        run: |
          DATE=$(date +'%Y-%m-%d')
          echo "CURRENT_DATE=$DATE" >> $GITHUB_OUTPUT


      - name: Aktualisiere CURRENT_DATE in Organisations-Variable (sicher)
        run: |
            CURRENT_DATE="${{ steps.set_date.outputs.CURRENT_DATE }}"

            if [ -z "$CURRENT_DATE" ]; then
              echo "Fehler: CURRENT_DATE ist leer!"
              exit 1
            fi

            ORG_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f1)

            EXISTING=$(curl -s \
              -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/orgs/${ORG_NAME}/actions/variables/CURRENT_DATE \
              | jq -r '.value')

            echo "Updating org-level CURRENT_DATE from $EXISTING to $CURRENT_DATE"

            if [ "$EXISTING" != "$CURRENT_DATE" ]; then
              curl -X PATCH \
                -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
                -H "Accept: application/vnd.github+json" \
                https://api.github.com/orgs/${ORG_NAME}/actions/variables/CURRENT_DATE \
                -d "{\"value\": \"${CURRENT_DATE}\"}"
            else
              echo "CURRENT_DATE ist bereits aktuell: $CURRENT_DATE"
            fi

      - name: copy .next folder
        run: cp -r .next next_copy

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.node-version }}
          path: next_copy
          retention-days: 1

  analyze:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        node-version: [23.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore Node.js modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Run ESLint
        run: npm run lint

      - name: Run security audit
        run: npm audit --omit=dev --audit-level=high

      - name: Generate documentation
        run: npm run typedoc

      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          publish_dir: ./page

  package:
    runs-on: ubuntu-latest
    needs: [build, analyze]
    strategy:
      matrix:
        node-version: [23.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ matrix.node-version }}
          path: .next

      - name: Package build for distribution
        run: zip -r next.zip .next

      - name: Upload packaged build
        uses: actions/upload-artifact@v4
        with:
          name: packaged-build
          path: next.zip

  docker:
    name: üê≥ Docker Build & Push
    runs-on: ubuntu-latest
    needs: [build, package]
    env:
      CURRENT_DATE: ${{ needs.build.outputs.CURRENT_DATE }}
    if: github.actor == 'caleb-script' && github.event_name == 'push'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build . \
            -t ${{ env.IMAGE_NAME }}:${{ env.CURRENT_DATE }} \
            --build-arg NEXT_PUBLIC_BACKEND_SERVER_URL=${{ env.NEXT_PUBLIC_BACKEND_SERVER_URL }} \
            --build-arg NEXT_PUBLIC_KEYCLOAK_CLIENT_ID=${{ env.NEXT_PUBLIC_KEYCLOAK_CLIENT_ID }} \
            --build-arg NEXT_PUBLIC_KEYCLOAK_CLIENT_SECRET=${{ env.NEXT_PUBLIC_KEYCLOAK_CLIENT_SECRET }} \
            --build-arg NEXT_PUBLIC_KEYCLOAK_ISSUER=${{ env.NEXT_PUBLIC_KEYCLOAK_ISSUER }} \
            --build-arg NEXT_PUBLIC_DEFAULT_ROUTE=${{ env.NEXT_PUBLIC_DEFAULT_ROUTE }} \
            --build-arg NEXTAUTH_URL=${{ env.NEXTAUTH_URL }} \
            --build-arg NEXTAUTH_SECRET=${{ env.NEXTAUTH_SECRET }} \
  


      - name: Tag Docker Image
        run: |
          docker tag ${{ env.IMAGE_NAME }}:${{ env.CURRENT_DATE }} ${{ env.IMAGE_NAME }}:latest
          docker tag ${{ env.IMAGE_NAME }}:${{ env.CURRENT_DATE }} ${{ env.IMAGE_NAME }}:${{ env.CURRENT_DATE }}

      - name: Push Docker Image
        run: |
          docker push ${{ env.IMAGE_NAME }}:${{ env.CURRENT_DATE }}
          docker push ${{ env.IMAGE_NAME }}:latest
