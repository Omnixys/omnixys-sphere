name: CI/CD 

on:
  pull_request:
    branches:
      - '**'

  push:
    branches:
      - main
    tags:
      - 'v*' # Nur f√ºr Versionstags (z. B. v1.0.0)

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USER }}/${{ secrets.SERVICE }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [23.x, 24.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Compile TypeScript
        run: npx tsc

      - name: copy .next folder
        run: cp -r .next next_copy

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.node-version }}
          path: next_copy
          retention-days: 1

  analyze:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        node-version: [23.x, 24.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore Node.js modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Run ESLint
        run: npm run lint

      - name: Run security audit
        run: npm audit --omit=dev --audit-level=high

      - name: Generate documentation
        run: npm run typedoc

      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          publish_dir: ./page

  package:
    runs-on: ubuntu-latest
    needs: [build, analyze]
    strategy:
      matrix:
        node-version: [23.x, 24.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ matrix.node-version }}
          path: .next

      - name: Package build for distribution
        run: zip -r next.zip .next

      - name: Upload packaged build
        uses: actions/upload-artifact@v4
        with:
          name: packaged-build
          path: next.zip

  docker:
    name: üê≥ Docker Build & Push
    runs-on: ubuntu-latest
    needs: [build, package]
    env:
      CURRENT_DATE: ${{ needs.build.outputs.CURRENT_DATE }}
    if: github.actor == 'caleb-script' && github.event_name == 'push'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.CURRENT_DATE }} .


      - name: Tag Docker Image
        run: |
          docker tag ${{ env.IMAGE_NAME }}:${{ env.CURRENT_DATE }} ${{ env.IMAGE_NAME }}:latest
          docker tag ${{ env.IMAGE_NAME }}:${{ env.CURRENT_DATE }} ${{ env.IMAGE_NAME }}:${{ env.CURRENT_DATE }}

      - name: Push Docker Image
        run: |
          docker push ${{ env.IMAGE_NAME }}:${{ env.CURRENT_DATE }}
          docker push ${{ env.IMAGE_NAME }}:latest
